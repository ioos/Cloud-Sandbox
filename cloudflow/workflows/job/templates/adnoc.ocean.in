!
!  ROMS/TOMS Standard Input parameters.
!
!svn $Id: ocean_cblast.in 283 2007-05-10 14:42:30Z wilkin $
!========================================================= Hernan G. Arango ===
!  Copyright (c) 2002-2007 The ROMS/TOMS Group                                !
!    Licensed under a MIT/X style license                                     !
!    See License_ROMS.txt                                                     !
!==============================================================================
!                                                                             !
! Input parameters can be entered in ANY order, provided that the parameter   !
! KEYWORD (usually, upper case) is typed correctly followed by "="  or "=="   !
! symbols. Any comment lines are allowed and must begin with an exclamation   !
! mark (!) in column one.  Comments may  appear to the right of a parameter   !
! specification to improve documentation.  All comments will ignored during   !
! reading.  Blank lines are also allowed and ignored. Continuation lines in   !
! a parameter specification are allowed and must be preceded by a backslash   !
! (\).  In some instances, more than one value is required for a parameter.   !
! If fewer values are provided, the  last value  is assigned for the entire   !
! parameter array.  The multiplication symbol (*),  without blank spaces in   !
! between, is allowed for a parameter specification.  For example, in a two   !
! grids nested application:                                                   !
!                                                                             !
!    AKT_BAK == 2*1.0d-6  2*5.0d-6              ! m2/s                        !
!                                                                             !
! indicates that the first two entries of array AKT_BAK,  in fortran column-  !
! major order, will have the same value of "1.0d-6" for grid 1,  whereas the  !
! next two entries will have the same value of "5.0d-6" for grid 2.           !
!                                                                             !
! In multiple levels of nesting and/or multiple connected domains  step-ups,  !
! "Ngrids" entries are expected for some of these parameters.  In such case,  !
! the order of the entries for a parameter is extremely important.  It  must  !
! follow the same order (1:Ngrids) as in the state variable declaration. The  !
! USER may follow the above guidelines for specifying his/her values.  These  !
! parameters are marked by "==" plural symbol after the KEYWORD.              !
!                                                                             !
!==============================================================================
!
! Application title.

       TITLE = ADNOC ROMS

! Please Cite usage of this model configuration as:
!
! Wilkin, J., 2006: The summertime heat budget and circulation of 
! southeast New England shelf waters, Journal of Physical Oceanography, 
! 36(11), 1997-2011.
! URL for full text article:
! http://ams.allenpress.com/perlserv/?request=get-document&doi=10.1175%2FJPO2968.1
! or http://tinyurl.com/2nnzyp
!
! and:
!
! He, R. and J. Wilkin, 2006: Barotropic tides on the southeast New England 
! shelf: A view from a hybrid data assimilative modeling approach. Journal of 
! Geophysical Research, 111, C08002, doi:10.1029/2005JC003254.


! C-preprocessing Flag, default configuration.

 !   MyAppCPP = arg05b

! Input variable information file name.  This file needs to be processed
! first so all information arrays can be initialized properly.

     VARNAME = varinfo.dat

! Number of nested grids

      Ngrids = 1

! Grid dimension parameters. See notes below in the Glossary for how to set
! these parameters correctly.

          Lm == 687         ! Number of I-direction INTERIOR RHO-points
          Mm == 470    ! Number of J-direction INTERIOR RHO-points
           N == 10           ! Number of vertical levels

        Nbed =  0             ! Number of sediment bed layers

         NAT =  2             ! Number of active tracers (usually, 2)
         NPT =  0             ! Number of inactive passive tracers
         NCS =  0             ! Number of cohesive (mud) sediment tracers
         NNS =  0             ! Number of non-cohesive (sand) sediment tracers

! Domain decomposition parameters for serial, distributed-memory or
! shared-memory configurations used to determine tile horizontal range
! indices (Istr,Iend) and (Jstr,Jend), [1:Ngrids].

      NtileI == __NTILEI__                      ! I-direction partition
      NtileJ == __NTILEJ__                      ! J-direction partition

! Set lateral boundary conditions keyword. Notice that a value is expected
! for each boundary segment per nested grid for each state variable.
!
! Each tracer variable requires [1:4,1:NAT+NPT,Ngrids] values. Otherwise,
! [1:4,1:Ngrids] values are expected for other variables. The boundary
! order is: 1=west, 2=south, 3=east, and 4=north. That is, anticlockwise
! starting at the western boundary.
!
! The keyword is case insensitive and usually has three characters. However,
! it is possible to have compound keywords, if applicable. For example, the
! keyword "RadNud" implies radiation boundary condition with nudging. This
! combination is usually used in active/passive radiation conditions.
!
!   Keyword    Lateral Boundary Condition Type
!
!   Cha        Chapman_implicit (free-surface)
!   Che        Chapman_explicit (free-surface)
!   Cla        Clamped
!   Clo        Closed
!   Fla        Flather (2D momentum)                  _____N_____     j=Mm
!   Gra        Gradient                              |     4     |
!   Nes        Nested (refinement)                   |           |
!   Nud        Nudging                             1 W           E 3
!   Per        Periodic                              |           |
!   Rad        Radiation                             |_____S_____|
!   Red        Reduced Physics (2D momentum)               2          j=1
!   Shc        Shchepetkin (2D momentum)            i=1         i=Lm
!
!                   W       S       E       N
!                   e       o       a       o
!                   s       u       s       r
!                   t       t       t       t
!                           h               h
!
!                   1       2       3       4

   LBC(isFsur) ==   Clo     Clo     Cha     Clo         ! free-surface
   LBC(isUbar) ==   Clo     Clo     Fla     Clo         ! 2D U-momentum
   LBC(isVbar) ==   Clo     Clo     Fla     Clo         ! 2D V-momentum
   LBC(isUvel) ==   Clo     Clo     Rad     Clo         ! 3D U-momentum
   LBC(isVvel) ==   Clo     Clo     Rad     Clo         ! 3D V-momentum
   LBC(isMtke) ==   Clo     Clo     Rad     Clo         ! mixing TKE

   LBC(isTvar) ==   Clo     Clo     Rad     Clo \       ! temperature
                    Clo     Clo     Rad     Clo         ! salinity

! Adjoint-based algorithms can have different lateral boundary
! conditions keywords.

ad_LBC(isFsur) ==   Clo     Clo     Per     Clo         ! free-surface
ad_LBC(isUbar) ==   Clo     Clo     Per     Clo         ! 2D U-momentum
ad_LBC(isVbar) ==   Clo     Clo     Per     Clo         ! 2D U-momentum
ad_LBC(isUvel) ==   Clo     Clo     Per     Clo         ! 3D U-momentum
ad_LBC(isVvel) ==   Clo     Clo     Per     Clo         ! 3D V-momentum
ad_LBC(isMtke) ==   Clo     Clo     Per     Clo         ! mixing TKE

ad_LBC(isTvar) ==   Clo     Clo     Per     Clo \       ! temperature
                    Clo     Clo     Per     Clo         ! salinity

! Set lateral open boundary edge volume conservation switch for
! nonlinear model and adjoint-based algorithms. Usually activated
! with radiation boundary conditions to enforce global mass
! conservation, except if tidal forcing is enabled. [1:Ngrids].

   VolCons(west)  ==  F                            ! western  boundary
   VolCons(east)  ==  F                            ! eastern  boundary
   VolCons(south) ==  F                            ! southern boundary
   VolCons(north) ==  F                            ! northern boundary

ad_VolCons(west)  ==  F                            ! western  boundary
ad_VolCons(east)  ==  F                            ! eastern  boundary
ad_VolCons(south) ==  F                            ! southern boundary
ad_VolCons(north) ==  F                            ! northern boundary


! Time-Stepping parameters.

      NTIMES == __NTIMES__
      DT == 120.0d0
      NDTFAST == 60


! Model iteration loops parameters.

       ERstr =  1
       ERend =  1
      Nouter =  1
      Ninner =  1
  Nintervals =  1

! Number of eigenvalues (NEV) and eigenvectors (NCV) to compute for the
! Lanczos/Arnoldi problem in the Generalized Stability Theory (GST)
! analysis. NCV must be greater than NEV (see documentation below).

         NEV =  2                               ! Number of eigenvalues
         NCV =  10                              ! Number of eigenvectors

! Input/Output parameters.

       NRREC == 0          !Switch(s) to indicate re-start from a previous solution.
   LcycleRST == T
        NRST == 360        !Number of time-steps between writing of re-start fields.
        NSTA == 30         !Number of time-steps between writing data into stations file.
                           !Station data is written at all levels.
        NFLT == 1
       NINFO == 6

! Output history, average, diagnostic files parameters.

     LDEFOUT == T 
        NHIS == 30 
     NDEFHIS == 30
      NTSAVG == 1440
        NAVG == 1440
     NDEFAVG == 1440

      NTSDIA == 1          !Starting time-step for the accumulation of output time-averaged diagnostics data.
        NDIA == 30         !Number of time-steps between writing time-averaged diagnostics data into diagnostics file.
     NDEFDIA == 54000      !Number of time-steps between the creation of new time-averaged diagnostics file

! Output tangent linear and adjoint models parameters.

   LcycleTLM == F
        NTLM == 72       !Number of time-steps between writing fields into tangent linear model file.
     NDEFTLM == 0
   LcycleADJ == F
        NADJ == 72       !Number of time-steps between writing fields into adjoint model file.
     NDEFADJ == 0        !Number of time-steps between the creation of new adjoint file.
        NSFF == 72       !Number of time-steps between 4DVAR adjustment of surface forcing fluxes.
        NOBC == 2880     !Number of time-steps between 4DVAR adjustment of open boundary fields.

! Output check pointing GST restart parameters.

     LrstGST =  F                               ! GST restart switch
  MaxIterGST =  500                             ! maximun number of iterations
        NGST =  10                              ! check pointing interval

! Relative accuracy of the Ritz values computed in the GST analysis.

    Ritz_tol =  1.0d-15

! Harmonic/biharmonic horizontal diffusion of tracer: [1:NAT+NPT,Ngrids].

        TNU2 == 0.50d0  0.50d0                    ! m2/s
        TNU4 == 0.0d0                         ! m4/s

! Harmononic/biharmonic, horizontal viscosity coefficient: [Ngrids].

       VISC2 == 5.0d0 !2.5d0                           ! m2/s
       VISC4 == 0.0d0                           ! m4/s

! Vertical mixing coefficients for active tracers: [1:NAT+NPT,Ngrids]

     AKT_BAK == 1.0d-6 1.0d-6                   ! m2/s

! Vertical mixing coefficient for momentum: [Ngrids].

     AKV_BAK == 1.0d-5                          ! m2/s

! Turbulent closure parameters.

     AKK_BAK == 5.0d-6                          ! m2/s
     AKP_BAK == 5.0d-6                          ! m2/s
      TKENU2 == 0.0d0                           ! m2/s
      TKENU4 == 0.0d0                           ! m4/s

! Generic length-scale turbulence closure parameters.

       GLS_P == 3.0d0                           ! K-epsilon
       GLS_M == 1.5d0
       GLS_N == -1.0d0
    GLS_Kmin == 7.6d-6
    GLS_Pmin == 1.0d-12

    GLS_CMU0 == 0.5477d0
      GLS_C1 == 1.44d0
      GLS_C2 == 1.92d0
     GLS_C3M == -0.4d0
     GLS_C3P == 1.0d0
    GLS_SIGK == 1.0d0
    GLS_SIGP == 1.30d0

! Constants used in surface turbulent kinetic energy flux computation.

  CHARNOK_ALPHA == 1400.0d0         ! Charnok surface roughness
 ZOS_HSIG_ALPHA == 0.5d0            ! roughness from wave amplitude
       SZ_ALPHA == 0.25d0           ! roughness from wave dissipation
      CRGBAN_CW == 100.0d0          ! Craig and Banner wave breaking

! Constants used in momentum stress computation.

        RDRG == 3.50d-04      ! 0.0d0  ! 3.0d-04                    ! m/s
       RDRG2 == 3.50d-03                    ! nondimensional
         Zob == 0.025d0       ! 0.0d0                     ! m
         Zos == 0.025d0                     ! m

! Height (m) of atmospheric measurements for Bulk fluxes parameterization.

      BLK_ZQ == 2.0d0                     ! air humidity
      BLK_ZT == 2.0d0                     ! air temperature
      BLK_ZW == 10.0d0                     ! winds

! Minimum depth for wetting and drying.

       DCRIT == 0.50d0                     ! m

! Various parameters.

       WTYPE == 1
     LEVSFRC == 15
     LEVBFRC == 1
! Set vertical, terrain-following coordinates transformation equation and
! stretching function (see below for details), [1:Ngrids].

     Vtransform == 2                          ! transformation equation
     Vstretching == 4                          ! stretching function

! Vertical S-coordinates parameters, [1:Ngrids].

     THETA_S == 7.0d0   !5.0d0                      ! 0 < THETA_S < 20
     THETA_B == 0.1d0   !0.4d0                      ! 0 < THETA_B < 1
      TCLINE == 5.0d0                      ! m

! Mean Density and Brunt-Vaisala frequency.

        RHO0 =  1025.0d0                   ! kg/m3
     BVF_BAK =  1.0d-4                     ! 1/s2

! Time-stamp assigned for model initialization, reference time
! origin for tidal forcing, and model reference time for output
! NetCDF units attribute.

  DSTART     =  0.0d0                ! days
  TIDE_START =  0.0d0                ! days 2015.01.01
  TIME_REF   =  __TIME_REF__         ! yyyymmdd.hh

! Nudging/relaxation time scales, inverse scales will be computed
! internally, [1:Ngrids].

       TNUDG == 1.0d0                    ! days
       ZNUDG == 1.0d0                        ! days
      M2NUDG == 1.0d0                        ! days
      M3NUDG == 1.0d0                      ! days

! Factor between passive (outflow) and active (inflow) open boundary
! conditions, [1:Ngrids]. If OBCFAC > 1, nudging on inflow is stronger
! than on outflow (recommended).

      OBCFAC == 1.0d0                     ! nondimensional

! Linear equation of State parameters:

          R0 == 1027.0d0                   ! kg/m3
          T0 == 9.0d0                     ! Celsius
          S0 == 30.0d0                     ! PSU
       TCOEF == 1.7d-4                     ! 1/Celsius
       SCOEF == 7.6d-4                      ! 1/PSU

! Slipperiness parameter: 1.0 (free slip) or -1.0 (no slip)

      GAMMA2 == 1.0d0

! Starting (DstrS) and ending (DendS) day for adjoint sensitivity forcing.
! DstrS must be less or equal to DendS. If both values are zero, their
! values are reset internally to the full range of the adjoint integration.

       DstrS == 0.0d0                      ! starting day
       DendS == 0.0d0                      ! ending day

! Starting and ending vertical levels of the 3D adjoint state variables
! whose sensitivity is required.

       KstrS == 1                          ! starting level
       KendS == 1                          ! ending level

! Logical switches (TRUE/FALSE) to specify the adjoint state variables
! whose sensitivity is required.

Lstate(isFsur) == F                        ! free-surface
Lstate(isUbar) == F                        ! 2D U-momentum
Lstate(isVbar) == F                        ! 2D V-momentum
Lstate(isUvel) == F                        ! 3D U-momentum
Lstate(isVvel) == F                        ! 3D V-momentum

! Logical switches (TRUE/FALSE) to specify the adjoint state tracer
! variables whose sensitivity is required (NT values are expected).

Lstate(isTvar) == F F                      ! tracers

! Stochastic optimals time decorrelation scale (days) assumed for
! red noise processes.

    SO_decay == 2.0d0                      ! days

! Logical switches (TRUE/FALSE) to specify the state surface forcing
! variable whose stochastic optimals is required.

SOstate(isUstr) == F                       ! surface u-stress
SOstate(isVstr) == F                       ! surface v-stress

! Logical switches (TRUE/FALSE) to specify the surface tracer forcing
! variable whose stochastic optimals is required (NT values are expected).

SOstate(isTsur) == F F                     ! surface tracer flux

! Stochastic optimals surface forcing standard deviation for
! dimensionalization.

SO_sdev(isUstr) == 1.0d0                   ! surface u-stress
SO_sdev(isVstr) == 1.0d0                   ! surface v-stress
SO_sdev(isTsur) == 1.0d0 1.0d0             ! NT surface tracer flux

! Logical switches (TRUE/FALSE) to activate writing of fields into
! HISTORY output file.

Hout(idUvel) == T                          ! 3D U-velocity
Hout(idVvel) == T                          ! 3D V-velocity
Hout(idWvel) == F                          ! 3D W-velocity
Hout(idOvel) == F                          ! omega vertical velocity
Hout(idUbar) == T                          ! 2D U-velocity
Hout(idVbar) == T                          ! 2D V-velocity
Hout(idFsur) == T                          ! free-surface
Hout(idBath) == F                          ! time-dependent bathymetry

Hout(idTvar) == T T                        ! temperature and salinity

Hout(idUair) == T                          ! surface U-wind
Hout(idVair) == T                          ! surface V-wind

Hout(idUsms) == T                          ! surface U-stress
Hout(idVsms) == T                          ! surface V-stress
Hout(idUbms) == F                          ! bottom U-stress
Hout(idVbms) == F                          ! bottom V-stress

Hout(idUbrs) == F                          ! bottom U-current stress
Hout(idVbrs) == F                          ! bottom V-current stress
Hout(idUbws) == F                          ! bottom U-wave stress
Hout(idVbws) == F                          ! bottom V-wave stress
Hout(idUbcs) == F                          ! bottom max wave-current U-stress
Hout(idVbcs) == F                          ! bottom max wave-current V-stress

Hout(idUbot) == F                          ! bed wave orbital U-velocity
Hout(idVbot) == F                          ! bed wave orbital V-velocity
Hout(idUbur) == F                          ! bottom U-velocity above bed
Hout(idVbvr) == F                          ! bottom V-velocity above bed

Hout(idW2xx) == F                          ! 2D radiation stress, Sxx component
Hout(idW2xy) == F                          ! 2D radiation stress, Sxy component
Hout(idW2yy) == F                          ! 2D radiation stress, Syy component
Hout(idU2rs) == F                          ! 2D radiation U-stress
Hout(idV2rs) == F                          ! 2D radiation V-stress
Hout(idU2Sd) == F                          ! 2D U-Stokes velocity
Hout(idV2Sd) == F                          ! 2D V-Stokes velocity

Hout(idW3xx) == F                          ! 3D radiation stress, Sxx component
Hout(idW3xy) == F                          ! 3D radiation stress, Sxy component
Hout(idW3yy) == F                          ! 3D radiation stress, Syy component
Hout(idW3zx) == F                          ! 3D radiation stress, Szx component
Hout(idW3zy) == F                          ! 3D radiation stress, Szy component
Hout(idU3rs) == F                          ! 3D U-radiation stress
Hout(idV3rs) == F                          ! 3D V-radiation stress
Hout(idU3Sd) == F                          ! 3D U-Stokes velocity
Hout(idV3Sd) == F                          ! 3D V-Stokes velocity

Hout(idWamp) == T                          ! wave height
Hout(idWlen) == F                          ! wave length
Hout(idWdir) == F                          ! wave direction

Hout(idTsur) == F  F !                        ! surface net heat and salt flux
Hout(idLhea) == F                          ! latent heat flux
Hout(idShea) == F                          ! sensible heat flux
Hout(idLrad) == F                          ! longwave radiation flux
Hout(idSrad) == F                          ! shortwave radiation flux
Hout(idEmPf) == F                          ! E-P flux
Hout(idevap) == F                          ! evaporation rate
Hout(idrain) == F                          ! precipitation rate

Hout(idDano) == F !                          ! density anomaly
Hout(idVvis) == F !                          ! vertical viscosity
Hout(idTdif) == F !                         ! vertical T-diffusion
Hout(idSdif) == F !                          ! vertical Salinity diffusion
Hout(idHsbl) == F !                          ! depth of surface boundary layer
Hout(idHbbl) == F !                         ! depth of bottom boundary layer
Hout(idMtke) == F !                          ! turbulent kinetic energy
Hout(idMtls) == F !                         ! turbulent length scale

!vna 
! Logical switches (TRUE/FALSE) to activate writing of ice prognostic
! variables into HISTORY output file.
Hout(idUice) == F

Hout(idAice) == F
Hout(idHice) == F
Hout(idTice) == F
Hout(idHsno) == F
Hout(idTimid) == F
Hout(idSfwat) == F
Hout(idTauiw) == F
Hout(idChuiw) == F
Hout(idAgeice) == F
Hout(idSig11) == F
Hout(idSig12) == F
Hout(idSig22) == F
Hout(idS0mk) == T
Hout(idT0mk) == T
Hout(idWfr) == T
Hout(idWai) == T
Hout(idWao) == T
Hout(idWio) == T
Hout(idWro) == T

! Logical switches (TRUE/FALSE) to activate writing of fields into
! secondary Averages History output file.

!Hout2(idUvel) == T                          ! 3D U-velocity
!Hout2(idVvel) == T                          ! 3D V-velocity
!Hout2(idUbar) == F                          ! 2D U-velocity
!Hout2(idVbar) == F                          ! 2D V-velocity
!Hout2(idFsur) == T                          ! free-surface

!Hout2(idTvar) == F  F                        ! temperature and salinity

!Hout2(idUair) == F                          ! surface U-wind
!Hout2(idVair) == F                          ! surface V-wind
!Hout2(idUsms) == F                          ! surface U-stress
!Hout2(idVsms) == F                          ! surface V-stress

!Hout2(idTsur) == F F                        ! surface net heat and salt flux
!Hout2(idLhea) == F                          ! latent heat flux
!Hout2(idShea) == F                          ! sensible heat flux
!Hout2(idLrad) == F                          ! longwave radiation flux
!Hout2(idSrad) == F                          ! shortwave radiation flux
!Hout2(idEmPf) == F                          ! E-P flux
!Hout2(idevap) == F                          ! evaporation rate
!Hout2(idrain) == F                          ! precipitation rate

! Logical switches (TRUE/FALSE) to activate writing of extra inert passive
! tracers other than biological and sediment tracers. An inert passive tracer
! is one that it is only advected and diffused. Other processes are ignored.
! These tracers include, for example, dyes, pollutants, oil spills, etc.
! NPT values are expected. However, these switches can be activated using
! compact parameter specification.

 Hout(inert) == T                          ! inert passive tracers

! Logical switches (TRUE/FALSE) to activate writing of exposed sediment
! layer properties into HISTORY output file.  Currently, MBOTP properties
! are expected for the bottom boundary layer and/or sediment models:
!
!   Hout(idBott(isd50)),  isd50 = 1        ! mean grain diameter
!   Hout(idBott(idens)),  idens = 2        ! mean grain density
!   Hout(idBott(iwsed)),  iwsed = 3        ! mean settling velocity
!   Hout(idBott(itauc)),  itauc = 4        ! critical erosion stress
!   Hout(idBott(irlen)),  irlen = 5        ! ripple length
!   Hout(idBott(irhgt)),  irhgt = 6        ! ripple height
!   Hout(idBott(ibwav)),  ibwav = 7        ! wave excursion amplitude
!   Hout(idBott(izdef)),  izdef = 8        ! default bottom roughness
!   Hout(idBott(izapp)),  izapp = 9        ! apparent bottom roughness
!   Hout(idBott(izNik)),  izNik = 10       ! Nikuradse bottom roughness
!   Hout(idBott(izbio)),  izbio = 11       ! biological bottom roughness
!   Hout(idBott(izbfm)),  izbfm = 12       ! bed form bottom roughness
!   Hout(idBott(izbld)),  izbld = 13       ! bed load bottom roughness
!   Hout(idBott(izwbl)),  izwbl = 14       ! wave bottom roughness
!   Hout(idBott(iactv)),  iactv = 15       ! active layer thickness
!   Hout(idBott(ishgt)),  ishgt = 16       ! saltation height
!
!                                 1 1 1 1 1 1 1
!               1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6

Hout(idBott) == T T T T T T T T T F F F F F F F

! Generic User parameters, [1:NUSER].

       NUSER =  0
        USER =  0.d0

! Input NetCDF file names, [1:Ngrids].

     GRDNAME == ./ROMS_GRID.nc
     ININAME == ./HYCOM_INI.nc
     BRYNAME == ./HYCOM_BRY.nc

! Input forcing NetCDF file name(s).  The USER has the option to enter
! several files names per each nested grid.  For example, the USER may
! have a different files for wind products, heat fluxes, rivers, tides,
! etc.  The model will scan the file list and will read the needed data
! from the first file in the list containing the forcing field. Therefore,
! the order of the file names is very important.  If multiple forcing
! files per grid, enter first all the file names for grid 1, then grid 2,
! and so on.  Use a single line per entry with a continuation (\) symbol
! at the each entry, except the last one.

     NFFILES == 2                          ! number of forcing files
     FRCNAME == ./TIDE_20150101.nc \
                ./WRF_FORCING.nc

! Output NetCDF file names, [1:Ngrids].

     GSTNAME == ocean_gst.nc
     RSTNAME == ./output/rst_arg.nc   
     HISNAME == ./output/his_arg.nc
     TLMNAME == ./output/ocean_tlm.nc
     TLFNAME == ./output/ocean_tlf.nc
     ADJNAME == ./output/ocean_adj.nc
     AVGNAME == ./output/avg_arg.nc
     DIANAME == ./output/dia_arg.nc
     STANAME == ./output/sta_arg.nc
     FLTNAME == ./output/flt_arg.nc

! Input ASCII parameter filenames.

!     APARNAM =  ROMS/External/s4dvar.in
     SPOSNAM =  ./stations.in
!     FPOSNAM =  ./gr01_floats.in
!    BPARNAM =  ROMS/External/bioFasham.in
!     SPARNAM =  ROMS/External/sediment.in
!     USRNAME =  ROMS/External/MyFile.dat


